import exp from 'constants';
import { createRequire } from 'module';
const require = createRequire(import.meta.url);
const OpenAI = require("@langchain/openai").OpenAI;
const PromptTemplate = require("@langchain/core/prompts").PromptTemplate;
const CommaSeparatedListOutputParser = require("@langchain/core/output_parsers").CommaSeparatedListOutputParser;
const RunnableSequence = require("@langchain/core/runnables").RunnableSequence;
const dotenv= require('dotenv')

dotenv.config()

//Generate ideas for apis from schema
//takes in schema generated by langchain and query by user
const getAPIIdeas = async (schema) => {
  // With a `CommaSeparatedListOutputParser`, we can parse a comma separated list.
  console.log(schema)
  const parser = new CommaSeparatedListOutputParser();

  const chain = RunnableSequence.from([
    PromptTemplate.fromTemplate("Give me a comma separated list of 3 API Ideas with to create an API based on a JSON schema of the data. These must be only GET style read only APIs. Be very specific with the api idea and include the API name in your description of the api, and make API names specific. This is the JSON Schema to base your list off of: {schema} Only include API ideas that could be created based on the JSON schema. \n{format_instructions}"),
    new OpenAI({ temperature: 0.4, maxTokens:3000, modelName: "gpt-4"}),
    parser,
  ]);


  let response = await chain.invoke({
    schema: JSON.stringify(schema),
    format_instructions: "You must only return a comma separated list.",
  });




  return response.splice(0,3)

};


function formatIdeas(ideas){
  let returnArr =[]
  for(let idea of ideas){
    returnArr.push(idea.replace(/\n/g, ","))
  }
  return returnArr
}

export default getAPIIdeas;

